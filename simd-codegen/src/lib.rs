//! Code generation for other modules.
//!
//! Used by the `build.rs` script to generate some of the modules that would be tedious
//! to write manually. Autogenerated modules:
//! - `rsonpath::bytes::sequences` generated from [`bytes::sequences`]
//!
//! ## Note
//!
//! The intra links to the main `rsonpath` crate are broken until we find a way
//! to make rustdoc accept them.

#![warn(missing_docs)]
#![warn(rustdoc::missing_crate_level_docs)]

pub mod bytes;

/// Calculate the MD5 hash of the source of the crate.
///
/// All autogenerated files are prefixed with a comment of the hex representation
/// of MD5 digest of the codegen source to ensure it is generated from the up-to-date
/// version.
pub fn calculate_codegen_md5() -> md5::Digest {
    let bytes_mod = include_str!("bytes/mod.rs");
    let bytes_sequences = include_str!("bytes/sequences.rs");
    let lib = include_str!("lib.rs");

    let contents = format!("{bytes_mod}{bytes_sequences}{lib}");
    md5::compute(contents)
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::ffi::OsStr;
    use std::fs;
    use std::path::Path;
    use walkdir::WalkDir;

    #[test]
    fn calculate_codegen_md5_calculates_md5_of_all_source_files() {
        let current_dir = std::env::current_dir().unwrap();

        let mut sources: Vec<_> = WalkDir::new(current_dir)
            .into_iter()
            .filter_map(Result::ok)
            .filter(|e| !e.file_type().is_dir())
            .filter(|e| Path::new(e.file_name()).extension().and_then(OsStr::to_str) == Some("rs"))
            .collect();
        sources.sort_by(|a, b| a.path().cmp(b.path()));
        let mut combined_source = String::new();

        for entry in sources {
            let contents = fs::read_to_string(entry.path())
                .unwrap_or_else(|_| panic!("cannot read file {}", entry.path().display()));
            combined_source += &contents;
        }

        let digest = md5::compute(combined_source);
        let actual = calculate_codegen_md5();

        assert_eq!(digest, actual);
    }
}
