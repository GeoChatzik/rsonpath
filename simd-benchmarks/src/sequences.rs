//! Looking for sequences in byte streams.
// This module is autogenerated from [`rsonpath-codegen::bytes::sequences`].

pub mod avx2;
pub mod nosimd;
pub mod sse2;

#[cfg(test)]
mod tests {
    use aligners::{alignment::TwoTo, AlignedBytes};

    use super::*;

    static LONG_SEQUENCE: [u8; 256] = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
        167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
        185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
        203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
        239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
    ];

    #[test]
    fn find_byte_sequence_when_the_sequence_is_prefix_of_bytes_returns_0() {
        for i in 1..LONG_SEQUENCE.len() {
            let sequence = &LONG_SEQUENCE[..i];
            let aligned: AlignedBytes<TwoTo<6>> = sequence.into();
            let size1 = nosimd::find_byte_sequence(sequence, &aligned);
            let size128 = sse2::find_byte_sequence(sequence, aligned.relax_alignment());
            let size256 = avx2::find_byte_sequence(sequence, aligned.relax_alignment());

            assert_eq!(Some(0), size1, "size1 failed for sequence of length{}", i);
            assert_eq!(
                Some(0),
                size128,
                "size128 failed for sequence of length{}",
                i
            );
            assert_eq!(
                Some(0),
                size256,
                "size256 failed for sequence of length{}",
                i
            );
        }
    }

    #[test]
    #[should_panic]
    fn nosimd_find_byte_sequence_when_sequence_is_empty_panics() {
        nosimd::find_byte_sequence(&[], &[1, 2, 3, 4, 5, 6, 7, 8]);
    }

    #[test]
    #[should_panic]
    fn sse2_find_byte_sequence_when_sequence_is_empty_panics() {
        let aligned: AlignedBytes<TwoTo<4>> = (&[1, 2, 3, 4, 5, 6, 7, 8]).into();
        sse2::find_byte_sequence(&[], &aligned);
    }

    #[test]
    #[should_panic]
    fn avx2_find_byte_sequence_when_sequence_is_empty_panics() {
        let aligned: AlignedBytes<TwoTo<5>> = (&[1, 2, 3, 4, 5, 6, 7, 8]).into();
        avx2::find_byte_sequence(&[], &aligned);
    }

    struct TestByteStreamParameters<'a> {
        pub(crate) base_byte: u8,
        pub(crate) bytes_length: usize,
        pub(crate) sequence: &'a [u8],
        pub(crate) sequence_start_idx: usize,
    }

    fn test_byte_stream(parameters: TestByteStreamParameters<'_>) -> Vec<u8> {
        let mut bytes: Vec<_> = std::iter::repeat(parameters.base_byte)
            .take(parameters.bytes_length)
            .collect();

        let mut i = parameters.sequence_start_idx;
        for &b in parameters.sequence {
            assert!(i < bytes.len());
            bytes[i] = b;
            i += 1;
        }

        bytes
    }

    #[test]
    fn find_byte_sequence_on_sequences_at_every_position_in_stream() {
        const BYTES_LENGTH: usize = 512;

        for sequence_length in 1..256 {
            for starting_index in 0..BYTES_LENGTH - sequence_length {
                let sequence = &LONG_SEQUENCE[..sequence_length];
                let parameters = TestByteStreamParameters {
                    base_byte: 200,
                    bytes_length: BYTES_LENGTH,
                    sequence,
                    sequence_start_idx: starting_index,
                };
                let bytes = test_byte_stream(parameters);
                let aligned: AlignedBytes<TwoTo<6>> = bytes.into();

                let expected = Some(starting_index);
                let size1 = nosimd::find_byte_sequence(sequence, &aligned);
                let size128 = sse2::find_byte_sequence(sequence, aligned.relax_alignment());
                let size256 = avx2::find_byte_sequence(sequence, aligned.relax_alignment());

                assert_eq!(
                    expected, size1,
                    "size1 failed for sequence of length {} with starting_index {}",
                    sequence_length, starting_index
                );
                assert_eq!(
                    expected, size128,
                    "size128 failed for sequence of length {} with starting_index {}",
                    sequence_length, starting_index
                );
                assert_eq!(
                    expected, size256,
                    "size256 failed for sequence of length {} with starting_index {}",
                    sequence_length, starting_index
                );
            }
        }
    }

    #[test]
    fn find_byte_sequence_on_byte_stream_with_a_fake_match() {
        for sequence_length in 2..256 {
            let sequence = &LONG_SEQUENCE[..sequence_length];
            let mut bytes = vec![];
            let mut expected = 0;
            for subsequence_length in 1..sequence_length - 1 {
                bytes.extend_from_slice(&LONG_SEQUENCE[..subsequence_length]);
                expected += subsequence_length;
            }

            bytes.extend_from_slice(&LONG_SEQUENCE);
            let aligned: AlignedBytes<TwoTo<6>> = bytes.into();

            let size1 = nosimd::find_byte_sequence(sequence, &aligned);
            let size128 = sse2::find_byte_sequence(sequence, aligned.relax_alignment());
            let size256 = avx2::find_byte_sequence(sequence, aligned.relax_alignment());

            assert_eq!(
                Some(expected),
                size1,
                "size1 failed for sequence of length {}",
                sequence_length
            );
            assert_eq!(
                Some(expected),
                size128,
                "size128 failed for sequence of length {}",
                sequence_length
            );
            assert_eq!(
                Some(expected),
                size256,
                "size256 failed for sequence of length {}",
                sequence_length
            );
        }
    }

    //cspell:disable - a lot of random characters for tests.

    // This is duplicated test case from the `find_byte_sequence_benches` benchmark,
    // but for a smaller length so that tests run smoothly.
    // We know of no clean way of sharing the code without duplicating.
    #[test]
    fn find_byte_sequence_bench_correctness() {
        const LENGTH: usize = 4 * 1024 * 1024;
        const LETTERS: &str = "abcdefghijklmnopqrstuvwxyz";
        const SEQUENCE: &str = "umaxzlvhjkncfidewpyqrsbgotkfsniubghjlycmqxertwdzpvoa";

        let string = setup_string();
        let bytes = string.as_bytes();
        let aligned: AlignedBytes<TwoTo<6>> = bytes.into();
        let expected = Some(4194320);

        for sequence_length in [2, 3, 4, 8, 15, 16, 32, 33, 48] {
            let sequence = &SEQUENCE[..sequence_length];
            let size1 = nosimd::find_byte_sequence(sequence.as_bytes(), &aligned);
            let size128 = sse2::find_byte_sequence(sequence.as_bytes(), aligned.relax_alignment());
            let size256 = avx2::find_byte_sequence(sequence.as_bytes(), aligned.relax_alignment());

            assert_eq!(
                expected, size1,
                "size1 failed for sequence of length {}",
                sequence_length
            );
            assert_eq!(
                expected, size128,
                "size128 failed for sequence of length {}",
                sequence_length
            );
            assert_eq!(
                expected, size256,
                "size256 failed for sequence of length {}",
                sequence_length
            );
        }

        fn setup_string() -> String {
            let mut contents = String::new();
            while contents.len() < LENGTH {
                contents += LETTERS;
            }
            contents += SEQUENCE;
            contents += LETTERS;
            while contents.len() % 32 != 0 {
                contents += "x";
            }
            contents
        }
    }
}
