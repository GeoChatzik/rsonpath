//! Looking for sequences in byte streams.
// This module is autogenerated from [`rsonpath-codegen::bytes::sequences`].

use cfg_if::cfg_if;

pub mod nosimd;

cfg_if! {
    if #[cfg(doc)] {
        // All public export signatures are the same for simd and nosimd.
        #[doc(inline)]
        pub use nosimd::*;
    }
    else if #[cfg(not(feature = "simd"))] {
        pub use nosimd::*;
    }
    else if #[cfg(all(
        any(target_arch = "x86", target_arch = "x86_64"),
        target_feature = "avx2",
    ))] {
        mod avx2;
        pub use avx2::*;
    }
    else {
        compile_error!("Target architecture is not supported by SIMD features of this crate. Disable the default `simd` feature.");
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    use test_case::test_case;

    static LONG_SEQUENCE: [u8; 128] = [
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
        49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
        72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
        95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
        114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
    ];

    #[test]
    fn test() {
        let bytes = "abcdefgh".as_bytes();
        let sequences = ["fg".as_bytes(), "ed".as_bytes()];
        let result = find_any_of_sequences(&sequences, bytes);

        assert_eq!(result, Some((5, 0)));
    }

    #[test]
    fn find_byte_sequence_when_the_sequence_is_prefix_of_bytes_returns_0() {
        for i in 1..LONG_SEQUENCE.len() {
            let sequence = &LONG_SEQUENCE[..i];
            let result = find_byte_sequence(sequence, &LONG_SEQUENCE);

            assert_eq!(Some(0), result, "failed for sequence of length{}", i);
        }
    }

    #[test]
    #[should_panic]
    fn find_byte_sequence_when_sequence_is_empty_panics() {
        find_byte_sequence(&[], &[1, 2, 3, 4, 5, 6, 7, 8]);
    }

    struct TestByteStreamParameters<'a> {
        pub(crate) base_byte: u8,
        pub(crate) bytes_length: usize,
        pub(crate) sequence: &'a [u8],
        pub(crate) sequence_start_idx: usize,
    }

    fn test_byte_stream(parameters: TestByteStreamParameters<'_>) -> Vec<u8> {
        let mut bytes: Vec<_> = std::iter::repeat(parameters.base_byte)
            .take(parameters.bytes_length)
            .collect();

        let mut i = parameters.sequence_start_idx;
        for &b in parameters.sequence {
            assert!(i < bytes.len());
            bytes[i] = b;
            i += 1;
        }

        bytes
    }

    #[test]
    fn find_byte_sequence_on_sequences_at_every_position_in_stream() {
        const BYTES_LENGTH: usize = 256;

        for sequence_length in 1..128 {
            for starting_index in 0..BYTES_LENGTH - sequence_length {
                let sequence = &LONG_SEQUENCE[..sequence_length];
                let parameters = TestByteStreamParameters {
                    base_byte: 200,
                    bytes_length: BYTES_LENGTH,
                    sequence,
                    sequence_start_idx: starting_index,
                };
                let bytes = test_byte_stream(parameters);

                let expected = Some(starting_index);
                let result = find_byte_sequence(sequence, &bytes);

                assert_eq!(
                    expected, result,
                    "failed for sequence of length {} with starting_index {}",
                    sequence_length, starting_index
                );
            }
        }
    }

    #[test]
    fn find_byte_sequence_on_byte_stream_with_a_fake_match() {
        for sequence_length in 2..128 {
            let sequence = &LONG_SEQUENCE[..sequence_length];
            let mut bytes = vec![];
            let mut expected = 0;
            for subsequence_length in 1..sequence_length - 1 {
                bytes.extend_from_slice(&LONG_SEQUENCE[..subsequence_length]);
                expected += subsequence_length;
            }

            bytes.extend_from_slice(&LONG_SEQUENCE);
            let result = find_byte_sequence(sequence, &bytes);

            assert_eq!(
                Some(expected),
                result,
                "failed for sequence of length {}",
                sequence_length
            );
        }
    }

    //cspell:disable - a lot of random characters for tests.

    // This is duplicated test case from the `find_byte_sequence_benches` benchmark,
    // but for a smaller length so that tests run smoothly.
    // We know of no clean way of sharing the code without duplicating.
    #[test]
    fn find_byte_sequence_bench_correctness() {
        const LENGTH: usize = 16 * 1024 * 1024;
        const LETTERS: &str = "abcdefghijklmnopqrstuvwxyz";
        const SEQUENCE: &str = "umaxzlvhjkncfidewpyqrsbgotkfsniubghjlycmqxertwdzpvoa";

        let bytes = setup_bytes();
        let expected = Some(16777228);

        for sequence_length in [2, 3, 4, 8, 15, 16, 32, 33, 48] {
            let sequence = &SEQUENCE[..sequence_length];
            let result = find_byte_sequence(sequence.as_bytes(), bytes.as_bytes());

            assert_eq!(
                expected, result,
                "failed for sequence of length {}",
                sequence_length
            );
        }

        fn setup_bytes() -> String {
            let mut contents = String::new();
            while contents.len() < LENGTH {
                contents += LETTERS;
            }
            contents += SEQUENCE;
            contents += LETTERS;
            while contents.len() % 32 != 0 {
                contents += "x";
            }
            contents
        }
    }

    #[test_case(&["doggy", "dog", "cat"], "Petting a doggy." => Some((10, 0)); "when first matches")]
    #[test_case(&["doggy", "dog", "cat"], "Petting a dog." => Some((10, 1)); "when second matches")]
    #[test_case(&["doggy", "dog", "cat"], "Scratched by a cat." => Some((15, 2)); "when third matches")]
    #[test_case(&["doggy", "dog", "cat"], "I have no pets :(" => None; "when none matches")]
    #[test_case(&["pretty long", "pretty"], "Very pretty, but not pretty long." => Some((5, 1)); "when long sequence matches")]
    #[test_case(&["pretty long", "pretty"], "This sentence is not pretty long." => Some((21, 0)); "when long sequence does not match")]
    #[test_case(&[
        "aaaaaaab",
        "aaaaaaac",
        "aaaaaaad",
        "aaaaaaae",
        "aaaaaaaf",
        "aaaaaaag",
        "aaaaaaah",
        "aaaaaaai"
    ],
    &std::iter::repeat('a')
        .take(1024)
        .chain("aaaaaaai".chars())
        .collect::<String>() => Some((1024, 7)); "for a long example with 8 sequences")]
    fn find_any_of_sequences_correctness(
        sequences: &[&str],
        contents: &str,
    ) -> Option<(usize, usize)> {
        find_any_of_sequences(
            &sequences.iter().map(|x| x.as_bytes()).collect::<Vec<_>>(),
            contents.as_bytes(),
        )
    }
}
